# from tensorflow.keras.models import load_model
from flask import Flask, request, jsonify
import tensorflow as tf
# model = load_model("arrhythmia_detection_model1.h5")
model = tf.keras.models.load_model('arrhythmia_detection_model1.h5')
from routes.userRoutes import user_blueprint 
import numpy as np






def preprocess_input(arrhythmia):
    expected_shape = (10, 20, 1)  # Your model's input shape
    actual_length = len(arrhythmia)
    
    if actual_length > 200:  # Adjust according to (10,20)
        arrhythmia = arrhythmia[:200]  # Trim
    elif actual_length < 200:   
        arrhythmia = np.pad(arrhythmia, (0, 200 - actual_length), mode='constant')  # Pad
    
    arrhythmia = np.array(arrhythmia).reshape(1, 10, 20, 1)  # Reshape for model input
    return arrhythmia


def predict(arrhythmia):
    arrhythmia = preprocess_input(arrhythmia)
    prediction = model.predict(arrhythmia)
    
    # If binary classification
    if prediction.shape[1] == 1:
        predicted_class = int(prediction[0][0] >= 0.5)  # Convert probability to class (0 or 1)
    
    # If multi-class classification
    else:
        predicted_class = np.argmax(prediction)  # Get the class index with highest probability
    
    return predicted_class



arrhythmia = [-0.126871, -0.12241, -0.1237, -0.126014, -0.136553, -0.135384, -0.125635, -0.128251, -0.124664, -0.124445, -0.118628, -0.113236, -0.102926, -0.091046, -0.077215, -0.064022, -0.052883, -0.043366, -0.037925, -0.027367, -0.018065, -0.003733, 0.002714, 0.007728, 0.009771, 0.009338, 0.010847, 0.01252, 0.017858, 0.017004, 0.019758, 0.022383, 0.024636, 0.018916, 0.024989, 0.017259, 0.018496, 0.017057, 0.02136, 0.016731, 0.017396, 0.080002, 0.089199, 0.085638, 0.089099, 0.088327, 0.082893, 0.082566, 0.081824, 0.074975, 0.075315, 0.08201, 0.082503, 0.077579, 0.073445, 0.076179, 0.066247, 0.057182, 0.042643, 0.023078, 0.017449, 0.009764, 0.001887, -0.006935, -0.009148, -0.009374, -0.014516, -0.019259, -0.024257, -0.019648, -0.023241, -0.028933, -0.033795, -0.034342, -0.034413, -0.035295, -0.026335, -0.026009, -0.027194, -0.023668, -0.024153, -0.022673, -0.024616, -0.027325, -0.026747, -0.03229, -0.045273, -0.060977, -0.071438, -0.0866, -0.112045, -0.126446, -0.140244, -0.134362, -0.11627, -0.061538, 0.00587, 0.118834, 0.242272, 0.418714, 0.58428, 0.717108, 0.861262, 0.956594, 0.960155, 0.930895, 0.862517, 0.698093, 0.542218, 0.378107, 0.211685, 0.090173, -0.007343, -0.058199, -0.084043, -0.098937, -0.089335, -0.082686, -0.081481, -0.075272, -0.064977, -0.064879, -0.063, -0.065131, -0.068366, -0.070875, -0.068773, -0.073356, -0.07279, -0.072901, -0.077367, -0.07357, -0.077085, -0.071638, -0.076801, -0.070364, -0.076332, -0.066777, -0.066486, -0.073795, -0.077652, -0.071151, -0.073934, -0.075726, -0.078, -0.084102, -0.07628, -0.084985, -0.083358, -0.085056, -0.082045, -0.077487, -0.08579, -0.082411, -0.081578, -0.083454, -0.074814, -0.077403, -0.076498, -0.073604, -0.068309, -0.070107, -0.07302, -0.066318, -0.065602, -0.07143, -0.07458, -0.064771, -0.065714, -0.070132, -0.069971, -0.069153, -0.071276, -0.073888, -0.071721, -0.075775, -0.078804, -0.079387, -0.0775, -0.082341, -0.085269, -0.077918, -0.087101, -0.081051, -0.090059, -0.087393, -0.090514, -0.09418, -0.091694, -0.093967, -0.106455, -0.103693, -0.106181, -0.111969, -0.115585, -0.112686, -0.118385, -0.118126, -0.117779, -0.125715 ]
# Test
print(f"Predicted Class: {predict(arrhythmia)}")